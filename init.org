* Initial Setup
#+BEGIN_SRC elisp

  (defun add-to-path (str)
    (setenv "PATH" (concat str ":" (getenv "PATH"))))

  ;;(add-to-path "~/.3rdPartyTools/zls-x86_64-linux/bin")
  ;;(add-to-path "~/.cargo/bin/")

  (show-paren-mode 1)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  ;;(setq inhibit-startup-message t)
  ;;(setq initial-buffer-choice "/home/david/.emacs.d/init.org")
  ;;(setq initial-buffer-choice "/home/david/.config/config.org")
  ;;(setq default-directory "/home/david/")
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
  (require 'package)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
  (eval-and-compile
  (setq use-package-always-ensure t))
  (require 'use-package)
#+END_SRC
** Backups
#+BEGIN_SRC elisp
  (defvar backup-dir "~/.emacs.d/cache/backups" "")

  ;; ensure backup dir exists
  (if (not (file-directory-p backup-dir)) (make-directory backup-dir))

  (setq backup-directory-alist
	`((".*" . ,backup-dir)))
  (setq auto-save-file-name-transforms
	`((".*" ,backup-dir t)))
  (message "Deleting old backup files...")
  (let ((week (* 60 60 24 7))
	(current (float-time (current-time))))
    (dolist (file (directory-files temporary-file-directory t))
      (when (and (backup-file-name-p file)
		 (> (- current (float-time (fifth (file-attributes file))))
		    week))
	(message "%s" file)
	(delete-file file))))
#+END_SRC

* Packages
#+BEGIN_SRC elisp
  (use-package undo-tree
    :config
    ;; Prevent undo tree files from polluting your git repo
    (defvar-local undo-history-dir "~/.emacs.d/undo")
    (if (not (file-directory-p undo-history-dir)) (make-directory undo-history-dir))
    (setq undo-tree-history-directory-alist `(("." . ,undo-history-dir)))
    (global-undo-tree-mode 1))

  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-tree)
    :config
    (evil-mode 1))

  (use-package general)

  (use-package which-key
    :config
    (which-key-mode 1))

  (use-package flycheck
    :config
    (global-flycheck-mode))
  (use-package company
    :config
    (add-hook 'after-init-hook 'global-company-mode))

  (if (executable-find "zig")
  (use-package zig-mode
    :custom
    (zig-format-on-save nil)
    :after (lsp-mode)
    :init
    (add-to-list 'lsp-language-id-configuration '(zig-mode . "zig"))
    (lsp-register-client
     (make-lsp-client
      :new-connection (lsp-stdio-connection "zls")
      :activation-fn (lsp-activate-on "zig")
      :major-modes '(zig-mode)
      :server-id 'zls))))


  (use-package lsp-mode
    :commands lsp
    :hook (zig-mode . lsp)
    :custom
    (lsp-eldoc-enable-hover nil)
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :custom
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-sideline-show-diagnostics t)
    (lsp-ui-sideline-show-code-actions t)
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show-with-cursor t)
    :config
      ;; Bad wrapping with sideline when you don't set this.
      (custom-set-faces '(markdown-code-face ((t (:inherit default)))))
    )


  (if (executable-find "rust")
  (use-package rust-mode
    :config
    (add-hook 'rust-mode-hook
	      (lambda () (setq indent-tabs-mode nil)))
    (add-hook 'rust-mode-hook #'lsp)))


  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))

  (use-package yasnippet
    :after company
    :config
    (yas-global-mode 1)
    ;; Add yasnippet support for all company backends
    ;; https://github.com/syl20bnr/spacemacs/pull/179
    (defvar company-mode/enable-yas t
      "Enable yasnippet for all backends.")

    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas)
	      (and (listp backend) (member 'company-yasnippet backend)))
	  backend
	(append (if (consp backend) backend (list backend))
		'(:with company-yasnippet))))

    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)))

#+END_SRC

* Keybindings
#+BEGIN_SRC elisp
  (defconst my-leader-key "SPC")
  (general-create-definer my-leader-def
  :prefix my-leader-key)
  (general-define-key "<escape>" 'keyboard-escape-quit)

#+END_SRC


** utility
#+BEGIN_SRC elisp
  (defvar private/eshell-cur-max-n 0 "the current max eshell number")
  (defun new-eshell ()
    (interactive)
    (eshell private/eshell-cur-max-n)
    (setq private/eshell-cur-max-n (+ private/eshell-cur-max-n 1)))

  (defun switch-eshell ()
    (interactive)
    (let ((arg (string-to-number (read-string "Which Shell: "))))
      (if (> arg private/eshell-cur-max-n)
	  (setq private/eshell-cur-max-n (+ arg 1)))
      (eshell arg))
    )

  (message-box "%s" (alist-get 'key1 '((key1 value1) (key2 value2))))

  (my-leader-def
  :keymaps 'normal
  "d" '(:prefix-command nil :wk "directories")
  "dc" '(cd :wk "change directory")
  ":!" '(new-eshell :wk "new eshell")
  "::" '(switch-eshell :wk "switch eshell"))
#+END_SRC

** file
#+BEGIN_SRC elisp
  (defun find-init-file ()
    (interactive)
    (find-file "~/.emacs.d/init.org"))

  (my-leader-def
  :keymaps 'normal
  "f" '(:prefix-command nil :wk "file")
  "fs" '(save-buffer :wk "save buffer")
  "fo" '(find-file :wk "find file")
  "SPC ." '(find-init-file :wk "goto init.org"))

#+END_SRC
** Buffer
#+BEGIN_SRC elisp
(my-leader-def
:keymaps 'normal
"b" '(:prefix-command nil :wk "buffers")
"bm" '(buffer-menu :wk "buffer menu")
"bd" '(kill-buffer :wk "kill buffer"))
#+END_SRC

** Window
#+BEGIN_SRC elisp
(defun delwin-left () (interactive) (delete-window (window-in-direction 'left)))
(defun delwin-right () (interactive) (delete-window (window-in-direction 'right)))
(defun delwin-below () (interactive) (delete-window (window-in-direction 'below)))
(defun delwin-above () (interactive) (delete-window (window-in-direction 'above)))
(my-leader-def
:keymaps 'normal
"w" '(:prefix-command nil :wk "windows" )
"wd" '(:prefix-command nil :wk "delete window" )
"wdd" '(delete-window :wk "delete current window")
"wdh" '(delwin-left :wk  "delete left window")
"wdl" '(delwin-right :wk "delete right window")
"wdj" '(delwin-below :wk "delete up window")
"wdk" '(delwin-above :wk "delte down window")
"wh" '(windmove-left :wk "move to left window")
"wl" '(windmove-right :wk "move to right window")
"wj" '(windmove-down :wk "move to down window")
"wk" '(windmove-up :wk "move to up window")
"w/" '(split-window-horizontally :wk "split left and right")
"w-" '(split-window-vertically :wk "split up and down"))
#+END_SRC

** Yasnippet
#+BEGIN_SRC elisp
  (my-leader-def
    :keymaps 'normal
    "y" '(:prefix-command nil :wk "yasnippet")
    "yn" '(yas-new-snippet :wk "yas-new-snippet"))
#+END_SRC
